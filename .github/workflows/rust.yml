name: rust

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}-rust
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash -l -eo pipefail {0}

jobs:
  rust:
    strategy:
      matrix:
        os: [ubuntu-latest]
    name: "rust ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          ref: "2025.06.13"
          path: vcpkg

      - name: Set up environment variables and bootstrap vcpkg
        env:
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        run: |
          cd vcpkg
          ./bootstrap-vcpkg.sh
          cd ..

          echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV
          echo "PATH=$VCPKG_ROOT:$PATH" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE" >> $GITHUB_ENV

      - name: Cache vcpkg binaries
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: vcpkg/packages
          # Bump the number at the end of this line to force a new dependency build
          key: vcpkg-installed-${{ runner.os }}-${{ runner.arch }}-2

      - name: Install vcpkg dependencies
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          ./vcpkg/vcpkg install abseil openssl

      - name: Use stable Rust
        id: rust
        run: |
          rustup toolchain install stable --no-self-update
          rustup default stable
      - uses: Swatinem/rust-cache@v2
        with:
          # Update this key to force a new cache. When doing large dependency changes
          # (e.g., updating DataFusion), the old cache is not very useful and may result
          # in out-of-disk ("no space left on device")
          prefix-key: "v3"
      - name: Install dependencies
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y libgeos-dev
      - name: Check formatting
        run: |
          cargo fmt --all -- --check
      - name: Clippy
        run: |
          pushd rust
          cargo clippy --workspace --all-targets --all-features -- -Dwarnings
          popd
      - name: Test
        run: |
          pushd rust
          cargo test --workspace --all-targets --all-features
          popd
      - name: Doctests
        run: |
          pushd rust
          cargo test --workspace --doc --all-features
          popd
      - name: Check docs
        run: |
          pushd rust
          cargo doc --workspace --all-features
          popd
