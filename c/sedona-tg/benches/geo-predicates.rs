use std::iter::zip;

use criterion::{criterion_group, criterion_main, Criterion};
use datafusion_expr::ColumnarValue;
use sedona_expr::function_set::FunctionSet;
use sedona_schema::datatypes::WKB_GEOMETRY;
use sedona_testing::{
    create::create_scalar_value,
    data::test_geoparquet,
    read::{read_geoarrow_data_geometry, TestReadOptions},
};

// These benchmarks are all on ~250,000 points
const ARRAY_SIZE: usize = 250000;

fn benchmark_st_intersects(c: &mut Criterion, functions: &FunctionSet) {
    let udf = functions.scalar_udf("st_intersects").unwrap().clone();

    for (wkt_label, wkt) in [
        ("simple_scalar", SELECTIVE_WKT_SIMPLE),
        ("complex_scalar", SELECTIVE_WKT_COMPLEX),
    ] {
        let selective_scalar = create_scalar_value(Some(wkt), &WKB_GEOMETRY);

        let options = TestReadOptions::new(WKB_GEOMETRY).with_output_size(ARRAY_SIZE);
        let batches = read_geoarrow_data_geometry("ns-water", "water-junc", &options).unwrap();
        let sizes = batches.iter().map(|batch| batch.len()).collect::<Vec<_>>();
        let label = format!("tg_st_intersects-array_{wkt_label}");

        c.bench_function(&label, |b| {
            b.iter(|| {
                let selective_scalar = selective_scalar.clone();
                for (batch, size) in zip(&batches, &sizes) {
                    udf.invoke_batch(
                        &[
                            ColumnarValue::Array(batch.clone()),
                            selective_scalar.clone(),
                        ],
                        *size,
                    )
                    .unwrap();
                }
            })
        });
    }
}

fn criterion_benchmark(c: &mut Criterion) {
    // Don't require CI to download asset files for geoarrow-data
    if test_geoparquet("ns-water", "water-junc").is_err() {
        return;
    }

    let mut functions = sedona_functions::register::default_function_set();
    for (name, kernel) in sedona_tg::register::scalar_kernels() {
        functions.add_scalar_udf_kernel(name, kernel).unwrap();
    }

    benchmark_st_intersects(c, &functions);
}

// A simple scalar with not many vertices that selects a small chunk of the data
const SELECTIVE_WKT_SIMPLE: &str = r#"
POLYGON ((
    380004 5002182, 378456 5000301, 379520 4997993, 385019 5000421, 384379 5002316,
    380004 5002182))
"#;

// A simple scalar with many vertices that selects a small chunk of the data.
// This is the above polygon run through geos_densify(50) and geos_set_precision(1).
const SELECTIVE_WKT_COMPLEX: &str = r#"
POLYGON ((380054 5002184, 380103 5002185, 380153 5002187, 380203 5002188, 380253
5002190, 380302 5002191, 380352 5002193, 380402 5002194, 380451 5002196, 380501
5002197, 380551 5002199, 380601 5002200, 380650 5002202, 380700 5002203, 380750
5002205, 380799 5002206, 380849 5002208, 380899 5002209, 380949 5002211, 380998
5002212, 381048 5002214, 381098 5002216, 381147 5002217, 381197 5002219, 381247
5002220, 381297 5002222, 381346 5002223, 381396 5002225, 381446 5002226, 381495
5002228, 381545 5002229, 381595 5002231, 381645 5002232, 381694 5002234, 381744
5002235, 381794 5002237, 381843 5002238, 381893 5002240, 381943 5002241, 381993
5002243, 382042 5002244, 382092 5002246, 382142 5002247, 382192 5002249, 382241
5002251, 382291 5002252, 382341 5002254, 382390 5002255, 382440 5002257, 382490
5002258, 382540 5002260, 382589 5002261, 382639 5002263, 382689 5002264, 382738
5002266, 382788 5002267, 382838 5002269, 382888 5002270, 382937 5002272, 382987
5002273, 383037 5002275, 383086 5002276, 383136 5002278, 383186 5002279, 383236
5002281, 383285 5002283, 383335 5002284, 383385 5002286, 383434 5002287, 383484
5002289, 383534 5002290, 383584 5002292, 383633 5002293, 383683 5002295, 383733
5002296, 383782 5002298, 383832 5002299, 383882 5002301, 383932 5002302, 383981
5002304, 384031 5002305, 384081 5002307, 384130 5002308, 384180 5002310, 384230
5002311, 384280 5002313, 384329 5002314, 384379 5002316, 384395 5002270, 384410
5002224, 384426 5002177, 384441 5002131, 384457 5002085, 384473 5002039, 384488
5001992, 384504 5001946, 384519 5001900, 384535 5001854, 384551 5001808, 384566
5001761, 384582 5001715, 384598 5001669, 384613 5001623, 384629 5001576, 384644
5001530, 384660 5001484, 384676 5001438, 384691 5001392, 384707 5001345, 384722
5001299, 384738 5001253, 384754 5001207, 384769 5001161, 384785 5001114, 384800
5001068, 384816 5001022, 384832 5000976, 384847 5000929, 384863 5000883, 384879
5000837, 384894 5000791, 384910 5000745, 384925 5000698, 384941 5000652, 384957
5000606, 384972 5000560, 384988 5000513, 385003 5000467, 385019 5000421, 384974
5000401, 384928 5000381, 384883 5000361, 384837 5000341, 384792 5000321, 384746
5000301, 384701 5000281, 384655 5000260, 384610 5000240, 384565 5000220, 384519
5000200, 384474 5000180, 384428 5000160, 384383 5000140, 384337 5000120, 384292
5000100, 384246 5000080, 384201 5000060, 384156 5000040, 384110 5000020, 384065
5000000, 384019 4999980, 383974 4999959, 383928 4999939, 383883 4999919, 383837
4999899, 383792 4999879, 383747 4999859, 383701 4999839, 383656 4999819, 383610
4999799, 383565 4999779, 383519 4999759, 383474 4999739, 383428 4999719, 383383
4999699, 383337 4999679, 383292 4999658, 383247 4999638, 383201 4999618, 383156
4999598, 383110 4999578, 383065 4999558, 383019 4999538, 382974 4999518, 382928
4999498, 382883 4999478, 382838 4999458, 382792 4999438, 382747 4999418, 382701
4999398, 382656 4999378, 382610 4999357, 382565 4999337, 382519 4999317, 382474
4999297, 382429 4999277, 382383 4999257, 382338 4999237, 382292 4999217, 382247
4999197, 382201 4999177, 382156 4999157, 382110 4999137, 382065 4999117, 382020
4999097, 381974 4999077, 381929 4999057, 381883 4999036, 381838 4999016, 381792
4998996, 381747 4998976, 381701 4998956, 381656 4998936, 381611 4998916, 381565
4998896, 381520 4998876, 381474 4998856, 381429 4998836, 381383 4998816, 381338
4998796, 381292 4998776, 381247 4998756, 381202 4998735, 381156 4998715, 381111
4998695, 381065 4998675, 381020 4998655, 380974 4998635, 380929 4998615, 380883
4998595, 380838 4998575, 380792 4998555, 380747 4998535, 380702 4998515, 380656
4998495, 380611 4998475, 380565 4998455, 380520 4998434, 380474 4998414, 380429
4998394, 380383 4998374, 380338 4998354, 380293 4998334, 380247 4998314, 380202
4998294, 380156 4998274, 380111 4998254, 380065 4998234, 380020 4998214, 379974
4998194, 379929 4998174, 379884 4998154, 379838 4998133, 379793 4998113, 379747
4998093, 379702 4998073, 379656 4998053, 379611 4998033, 379565 4998013, 379520
4997993, 379499 4998038, 379478 4998084, 379457 4998129, 379437 4998174, 379416
4998219, 379395 4998265, 379374 4998310, 379353 4998355, 379332 4998400, 379311
4998446, 379291 4998491, 379270 4998536, 379249 4998581, 379228 4998627, 379207
4998672, 379186 4998717, 379165 4998762, 379144 4998808, 379124 4998853, 379103
4998898, 379082 4998943, 379061 4998989, 379040 4999034, 379019 4999079, 378998
4999124, 378978 4999170, 378957 4999215, 378936 4999260, 378915 4999305, 378894
4999351, 378873 4999396, 378852 4999441, 378832 4999486, 378811 4999532, 378790
4999577, 378769 4999622, 378748 4999667, 378727 4999713, 378706 4999758, 378685
4999803, 378665 4999848, 378644 4999894, 378623 4999939, 378602 4999984, 378581
5000029, 378560 5000075, 378539 5000120, 378519 5000165, 378498 5000210, 378477
5000256, 378456 5000301, 378488 5000339, 378519 5000378, 378551 5000416, 378582
5000455, 378614 5000493, 378646 5000531, 378677 5000570, 378709 5000608, 378740
5000646, 378772 5000685, 378804 5000723, 378835 5000762, 378867 5000800, 378898
5000838, 378930 5000877, 378961 5000915, 378993 5000954, 379025 5000992, 379056
5001030, 379088 5001069, 379119 5001107, 379151 5001146, 379183 5001184, 379214
5001222, 379246 5001261, 379277 5001299, 379309 5001337, 379341 5001376, 379372
5001414, 379404 5001453, 379435 5001491, 379467 5001529, 379499 5001568, 379530
5001606, 379562 5001645, 379593 5001683, 379625 5001721, 379656 5001760, 379688
5001798, 379720 5001837, 379751 5001875, 379783 5001913, 379814 5001952, 379846
5001990, 379878 5002028, 379909 5002067, 379941 5002105, 379972 5002144, 380004
5002182, 380054 5002184))
"#;

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
